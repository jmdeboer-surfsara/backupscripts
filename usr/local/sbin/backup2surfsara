#!/bin/bash

# backup2surfsara: makes a backup to SURFsara storage facilities using duplicity.

# Changelog:
# 2016-06-00 - Created - Onno
# 2017-05-23 - Added ulimit - Onno
# 2017-05-26 - Adapted to Swift - Onno
# 2017-08-21 - Init DUPLICITY_OPTIONS in the config file instead of the main script - Onno
# 2017-08-29 - Pass on unknown options to duplicity - Onno
# 2017-12-22 - Added --skip-pre and --skip-post - Onno
# 2018-08-22 - Added --debug

usage() {
  cat <<-EOF
	Usage: $(basename $0) [--full|--report|--check] [--config <file>] [--skip-pre] [--skip-post] [--debug]
	EOF
  exit 1
}

# Process arguments
REPORT=false
CHECK=false
CONFIG=/etc/backup2surfsara
RUN_PRE=true
RUN_POST=true
DUPLICITY_CLI_OPTIONS=''   # Options can be set in the config file too but that is not loaded yet.
while [ $# -gt 0 ] ; do
  case "$1" in
    -h | --help )
      usage
      ;;
    --full )
      DUPLICITY_CLI_OPTIONS="full $DUPLICITY_CLI_OPTIONS"
      ;;
    --report )
      REPORT=true
      ;;
    --check )
      CHECK=true
      ;;
    --config )
      CONFIG="$2"
      shift
      ;;
    --skip-pre | --skippre )
      RUN_PRE=false
      ;;
    --skip-post | --skippost )
      RUN_POST=false
      ;;
    --debug )
      DUPLICITY_CLI_OPTIONS="--verbosity DEBUG $DUPLICITY_CLI_OPTIONS"
      ;;
    * )
      echo "Will pass on option '$1' to duplicity."
      DUPLICITY_CLI_OPTIONS="$DUPLICITY_CLI_OPTIONS $1"
  esac
  shift
done


# Load config file
if [ -f "$CONFIG" ] ; then
  source "$CONFIG"
else
  echo "No config file '$CONFIG' found."
  exit 1
fi

# Some basic checks
if ! stat -c %A "$CONFIG" | grep --silent '^-r..------' ; then
  echo "File '$CONFIG' has wrong permisions."
  exit 1
fi

if [ -z "$PASSPHRASE" ] ; then
  echo "Var PASSPHRASE is empty. Please define it in $CONFIG."
  exit 1
fi

if [ -z "$SOURCE" ] ; then
  echo "Var SOURCE is empty. Please define it in $CONFIG."
  exit 1
fi

if [ -z "$BACKUPPROTO" ] ; then
  echo "Var BACKUPPROTO is empty. Please define it in $CONFIG."
  exit 1
fi

if [[ $BACKUPPROTO =~ webdav ]] ; then
  if [ -z "$FTP_PASSWORD" ] ; then
    echo "Var FTP_PASSWORD is empty. Please define it in $CONFIG."
    exit 1
  fi

  if [ -z "$SOURCE" ] ; then
    echo "Var SOURCE is empty. Please define it in $CONFIG."
    exit 1
  fi

  if [ -z "$BACKUPSERVER" ] ; then
    echo "Var BACKUPSERVER is empty. Please define it in $CONFIG."
    exit 1
  fi

  if [ -z "$BACKUPUSER" ] ; then
    echo "Var BACKUPUSER is empty. Please define it in $CONFIG."
    exit 1
  fi

  if [ -z "$BACKUPDIR" ] ; then
    echo "Var BACKUPDIR is empty. Please define it in $CONFIG."
    exit 1
  fi
fi

if [ -z "$BACKUPCHAINLENGTH" ] ; then
  echo "Var BACKUPCHAINLENGTH is empty. Defaulting to 3M (3 months)."
  BACKUPCHAINLENGTH='3M'
fi

if [ -z "$REF_DATE" ] ; then
  REF_DATE='30 hours ago'
fi

# Newer versions of Duplicity want this
if [ $(ulimit -n) -lt 1024 ] ; then
  ulimit -n 1024
fi


function_exists() {
  declare -f -F $1 > /dev/null
  return $?
}

join() {
  local glue="$1"
  shift
  while [ $# -gt 0 ] ; do
    echo -n "$glue$1"
    shift
  done
}


# Check some executables we need
/usr/bin/which duplicity 2>&1 1>/dev/null || exit 1
/usr/bin/which curl      2>&1 1>/dev/null || exit 1


export FTP_PASSWORD
export PASSPHRASE

case $BACKUPPROTO in
  webdav* )
    DESTINATION="${BACKUPPROTO}${BACKUPUSER}@${BACKUPSERVER}${BACKUPDIR}/$(hostname -s)"
    ;;
  swift* )
    DESTINATION="${BACKUPPROTO}duplicity_backup_$(hostname -s)"
    ;;
  * )
    echo "ERROR: backup protocol $BACKUPPROTO not yet implemented in $0."
    exit 1
esac


# Print report only?
if $REPORT ; then
  duplicity collection-status \
            --ssl-cacert-path /etc/grid-security/certificates/ \
            "$DESTINATION"
  exit 0
fi


# Check last backup date only?
if $CHECK ; then
  # Nagios return codes; with these, you can use this script directly as a Nagios plugin.
  STATE_OK=0
  STATE_WARNING=1
  STATE_CRITICAL=2
  STATE_UNKNOWN=3
  STATE_DEPENDENT=4
  lastbackup=$(duplicity collection-status \
                   --ssl-cacert-path /etc/grid-security/certificates/ \
                   "$DESTINATION" \
               | grep 'Chain end time' \
               | sed -e 's/Chain end time: //' \
               | tail -n 1 \
              )
  if [ -z "$lastbackup" ] ; then
    echo "UNKNOWN: Could not get date of last backup."
    exit $STATE_UNKNOWN
  fi
  # Compare Unix time stamps
  refdate=$(date -d "$REF_DATE" +%s)
  lastdate=$(date -d "$lastbackup" +%s)
  if [ $lastdate -lt $refdate ] ; then
    echo "CRITICAL: last backup was older than $REF_DATE: $lastbackup"
    exit $STATE_CRITICAL
  else
    echo "OK: Last backup date is recent: $lastbackup" 
    exit $STATE_OK
  fi
  exit $STATE_UNKNOWN
fi


# Print timestamp for in log.
echo
date


# Things to do before the backup. You can define this function in /etc/backup2surfsara.
if $RUN_PRE && function_exists pre_backup ; then
  echo "Excuting pre_backup ..."
  pre_backup
  echo "Finished pre_backup."
fi


# Prepare for backup.
EXCLUDELIST=$(join ' --exclude ' ${EXCLUDE[@]});
echo "Exclude list: ${EXCLUDE[@]}"


# Run backup.
echo "Backing up $SOURCE to $DESTINATION"

set -x
duplicity $DUPLICITY_OPTIONS \
          $DUPLICITY_CLI_OPTIONS \
          --ssl-cacert-path /etc/grid-security/certificates/ \
          --full-if-older-than $BACKUPCHAINLENGTH \
          $EXCLUDELIST \
          $SOURCE \
          "$DESTINATION"
set +x

echo "Backup finished."

echo "Cleaning up old backups. Last 2 full backups and their incrementals are kept."

duplicity remove-all-but-n-full 2 --force \
          --ssl-cacert-path /etc/grid-security/certificates/ \
          "$DESTINATION"

echo "Finished cleanup."


# Things to do after backup. You can define this function in /etc/backup2surfsara.
if $RUN_POST && function_exists post_backup ; then
  echo "Excuting post_backup ..."
  post_backup
  echo "Finished post_backup."
fi


# Print timestamp for in log
echo
date
echo
