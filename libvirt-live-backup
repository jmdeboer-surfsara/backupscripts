#!/bin/bash

# Backs up running Libvirt virtual machines by creating snapshots.

# Based on http://wiki.libvirt.org/page/Live-disk-backup-with-active-blockcommit
# Disclaimer: this script could destroy your data! Don't use without testing first!
# Features:
#  * Can back up one VM or all running VMs (with --all)
#  * If a VM has multiple block devices, all will be backed up

# Changelog
# 2017-07-26 - Initial version - Onno

usage() {
  echo "Backs up a running VM by creating a temporary snapshot."
  echo "Usage:"
  echo "    $0 [VM] [targethost:]/targetdir"
  echo "    $0 --all [targethost:]/targetdir"
}

if [ -z "$1" ] ; then
  usage
  echo "Please specify a VM to back up, or specify --all."
  virsh list --all
  exit 1
fi

if [ -z "$2" ] ; then
  usage
  echo "Please specify a location to back up to."
  exit 1
fi

get_block_devs() {
  # List the block devices (vda etc.) for a domain.
  virsh domblklist "$VM" --details | awk '$2 == "disk" {print $3}'
}

get_snapshot_backing_files() {
  # virsh does not seem to have a command to get the backing files of a snapshot.
  # virsh domblklist only lists the overlay files when a snapshot has been made;
  # not the actual files we want to back up.
  # So we need to extract the backing files from the VM XML output.
  VM="$1"
  virsh dumpxml "$VM" \
  | sed -n "/<backingStore type='file'/,/<\/backingStore>/ { /source file/p }" \
  | sed -e "s/.*<source file='\(.*\)'\/>.*/\1/g"
}

create_vm_snapshot() {
  VM="$1"
  diskspecs=$(virsh domblklist "$VM" --details \
              | awk '$2 == "disk" {print "--diskspec " $3 ",file=" $4}' \
              | sed -e 's/.qcow2$/-overlay.qcow2/' \
              | tr '\n' ' ')  
  # First try with --quiesce to get more consistent snapshot; if that fails, try without; if that failes, quit.
  virsh snapshot-create-as --domain "$VM" \
                           --name "$VM-snapshot" \
                           $diskspecs \
                           --disk-only --atomic --quiesce \
  || virsh snapshot-create-as --domain "$VM" \
                           --name "$VM-snapshot" \
                           $diskspecs \
                           --disk-only --atomic \
  || exit 1
}

copy_vm() {
  # Make a copy of the disks snapshots and the VM description XML.
  VM="$1"
  echo "Copying snapshot disks to '$TARGETDIR' ..."
  # disks may have different names than the VM! extract names from domblklist!
  for image in $(get_snapshot_backing_files "$VM") ; do
    # We copy with rsync because it is atomic (we'll have either a good file or no file).
    echo "  $image"
    rsync -a "$image" "$TARGETDIR"
    # ToDo: copy VM definition XML file
  done
}

remove_vm_snapshot() {
  VM="$1"
  success=''
  # For each block device, commit the changes in the overlay into the backing store.
  for blockdev in $(get_block_devs "$VM") ; do
    virsh blockcommit "$VM" $blockdev --active --verbose --wait --pivot \
    || exit 1
  done
  # Now delete the snapshot.
  virsh snapshot-delete --domain "$VM" --metadata "$VM-snapshot" \
  || exit 1
  # Print a list of the current status.
  echo "Cleaning up committed overlay files..."
  files_in_use=$(virsh dumpxml $VM | awk -F  "'" '/<source file=.*/ {print $2}')
  for overlayfile in $(virsh domblklist "$VM" --details \
                | awk '$2 == "disk" {print $4}' \
                | sed -e 's/.qcow2$/-overlay.qcow2/')
  do
    # But first: test if the file is in use by the VM!
    if fgrep "$overlayfile" <<<"$files_in_use" ; then
      echo "ERROR: file '$overlayfile' is still referred to in the description of $VM. Please check 'virsh dumpxml $VM'"
      echo "Not deleting '$overlayfile'."
    else
      echo "  $overlayfile"
      rm -f "$overlayfile"
    fi
  done
  virsh domblklist "$VM" --details
}

# End of functions; start working here


# Did we get a VM name, or --all?
case "$1" in
  --all ) 
    VMLIST=$(virsh list | awk '/running/ {print $2}') ;;
  * )
    VMLIST="$1" ;;
esac

TARGETDIR="$2"
mkdir -p "$TARGETDIR"

for VM in $VMLIST ; do
  create_vm_snapshot "$VM"
  copy_vm "$VM"
  remove_vm_snapshot "$VM"
done
